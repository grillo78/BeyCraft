buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url = 'https://repo.spongepowered.org/maven/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.1"
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
    }
}
apply plugin: "com.wynprice.cursemaven"
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'java'

version = '1.7.32'
group = 'ga.beycraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'beycraft'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '-mixin.config=beycraft.mixins.json'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                beycraft {
                    source sourceSets.main
                }
            }
        }

        clientWithCredentials {
            parent runs.client

            workingDirectory project.file('runWithCredentials')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '-mixin.config=beycraft.mixins.json', '--username', 'grillo78', '--uuid', 'b8a6cebf-7221-4d53-b120-6e759f14fbfb'
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=beycraft.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                beycraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'beycraft', '--all', '--output', file('src/generated/resources/')

            mods {
                beycraft {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://maven.explodingcreeper.me/' }
    maven { url 'https://repo.repsy.io/mvn/gandiber/geckolib' }
    maven { url 'http://harleyoconnor.com/maven' }
    maven { url 'https://maven.hypherionmc.me/releases' }
    maven { url 'https://maven.explodingcreeper.me/' }
    maven { url "https://www.cursemaven.com" }
    maven { url 'https://maven.blamejared.com' }
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

shadowJar {
    configurations = [project.configurations.shade]
    classifier ''
}

reobf {
    shadowJar {
        dependsOn tasks.createMcpToSrg
        mappings = tasks.createMcpToSrg.outputs.files.singleFile
    } // Reobfuscate the shadowed JAR
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.58'

    compile fg.deobf('xyz.heroesunited:hu-core:2.5.38')
    shade 'ga.beycraft:RenderLib:1.0.0-pre7-test-2'
    runtimeOnly fg.deobf('curse.maven:furniture-55438:3346467')
    compile fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.2")
//    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.16.4-53.2")
//    shade 'com.oneandone:composite-jks:1.0'

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "beycraft",
                "Specification-Vendor"    : "beycraft-team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "beycraft-team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "beycraft.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "beycraft.refmap.json"
}